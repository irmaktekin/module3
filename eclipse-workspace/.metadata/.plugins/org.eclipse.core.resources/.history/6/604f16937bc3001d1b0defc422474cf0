package com.springDemo.SpringDemo.storage;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.log4j.Logger;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.springDemo.SpringDemo.models.UserImp;
@Component	
public class Storage implements BeanPostProcessor {
	
private HashMap <String, Object> hashMap = new HashMap<>();	
Logger logger = Logger.getLogger(Storage.class);
String fileName ="user.txt";
String line =null;


public <T> T getById(String id) {
	T entity = (T)hashMap.get(id);
	return entity;
	
}

public <T> T addPair(String key, T value){
	logger.debug("addPair is executed from storage");
	hashMap.put(key, value);


	System.out.println(hashMap);

	return value;
	
}
public boolean delete(long key) {
	return (boolean) hashMap.remove(key);
			
}
public static <T> T json2Java(String fileName, Class<T> classType) {
	T t = null;
	File file = new File("src/main/resources/"+fileName);
	try {
		ObjectMapper mapper = new ObjectMapper();
		mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
		t=mapper.readValue(file,classType);
	}catch(Exception e) {
		e.printStackTrace();
	}
	return t;
}

public Object postProcessAfterInitialization(
        Object bean, String beanName) throws BeansException
    {
        logger.debug("postProcessAfterInitialization() is called for Storage");
        
        json2Java("user.json",UserImp.class);
       
        return bean;
    }
	
}
	
	
	
	
	
		
	

